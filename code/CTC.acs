#library "CTC"
#include "zcommon.acs"
#include "zdaemon.acs"

/* 
===================================================
				Catch that Chicken!
		- Ported to ZD by Krawa & UberGewei
===================================================
Original idea by Cutmanmike and HotWax
*/
   

#define TID_PLAYERBASE				1000	// base to +MAX_PLAYERS
#define TID_CHICKEN					1110	// +1 .. +10 for feathers
#define TID_DUMMY					1120	// last feather, too
#define MAX_PLAYERS					64
#define SHOW_MAX_PLAYERS 			32
#define MAXSCORES_MSG_BASE			1		// for rank 1
#define MAXSCORES_TEXT_POSY			0.10
#define MAXSCORES_TEXT_POSY_OFFS	0.02
#define SEC							35

/* TID Assignments:

	1-10 -- Mapspots in the map **MUST BE INCLUDED** (10)
   1000-1063 -- Player TIDs assigned by script (64)
        1110 -- The Chicken (1)
   1111-1120 -- Feathers (10)


Please assign new TIDs outside of the 1-14 range if it can
be helped, and add new assignments to this list to avoid
conflicts.
*/

// Define new monster SpawnIDs here.
#define T_CHICKENSPAWNER   13
#define T_CHICKENPICKUP    14

#define CTC_MAIN		301
#define CTC_ENTER		302
#define CTC_DEATH		304
#define CTC_RESPAWN		305
#define CTC_LEAVERS		308
#define CTC_FEATHER		309
#define CTC_EMERGENCY	310
#define CTC_SCORING		311

// Print final score to the console
function void PrintScore (void)
{
	for (int i = 0; i < PlayerTopIndex() + 1; i++)
		if (PlayerInGame(i))
			Log(n:i+1, s:" ended with a score of: ", d:score[i]);
}

// Show maximum scores and player
function PrintScores (void)
{
	int i, j, k, colour;
	str tmp_scores_str;

	// Get maximum scores and player index.
	if (PlayerCount())
    {
		// Reset scores
		for (i = 0; i < SHOW_MAX_PLAYERS; i++)
		{
			max_scores[i] = 0;
			idx_player_max_scores[i] = 0;
		}
			
		// Check all players
		for (i = 0; i <= PlayerTopIndex(); i++)
		{
			if (PlayerInGame(i))	// Player is alive
			{
				for (j = 0; j < SHOW_MAX_PLAYERS ; j++)	// check ranks from highest to lowest
				{
					if (Score[i] > max_scores[j])	// Check if player has more scores than rank 1..n
					{
						for (k = SHOW_MAX_PLAYERS - 1; k >= j; k--)
						{
							if (k < SHOW_MAX_PLAYERS - 1)	// Don't shift last rank
							{
								max_scores[k + 1] = max_scores[k];		// Shift down 
								idx_player_max_scores[k + 1] = idx_player_max_scores[k];
							}
						}
						
						// Set current scores and index
						max_scores[j] = Score[i];
						idx_player_max_scores[j] = i;
						break;
					}
				}
			}
		}
	}
 
	// Print players and scores each rank.
	for (i = 0; i < SHOW_MAX_PLAYERS; i++)
	{
		if (max_scores[i] && PlayerInGame(idx_player_max_scores[i]))
		{
			if (Carrier == idx_player_max_scores[i]) 
			{
				if (FlashScore)
				{
					colour = CR_GOLD;
					FlashScore = 0;
				}
				else
				{
					colour = CR_WHITE;
					FlashScore = 1;
				}
			}
			else
				colour = CR_WHITE;
		
			SetFont("BIGFONT");
			tmp_scores_str = StrParam(n: idx_player_max_scores[i] + 1);
			HudMessageBold(s: tmp_scores_str, s: ": ", d: max_scores[i]; HUDMSG_FADEOUT, MAXSCORES_MSG_BASE + i, colour, 0.01, MAXSCORES_TEXT_POSY + i * MAXSCORES_TEXT_POSY_OFFS, 0.5, 0.5);
		}
	}
}

int Carrier = -1;
int Score[MAX_PLAYERS];
int max_scores[MAX_PLAYERS];
int idx_player_max_scores[MAX_PLAYERS];
int FlashScore = 0;
int WinningScore;
int NumPlayers = 0;
int rand;
bool gamestarted = false;

// Setup arena and spawn first chicken
Script CTC_MAIN Open
{
	Log(s:"[ZCTC]: Original idea by: Cutmanmike and HotWax. Ported to ZD by: UberGewei and Krawa");

	// Gamemode setup
	// This is my vision : Score should not not be changed mid-game.
	
	// Score Limit
	WinningScore = GetCvar("sv_winningscore");

	if (WinningScore <= 0 || WinningScore > 1000)
	{
		Log(s:"sv_winningscore has a wrong value (should be between 1 & 1000). Using default (100)");
		WinningScore = 100;
	}

	Carrier = -1;

	// wait for players
	while (PlayerCount() < 2)
	{
		Delay(70);
		SetFont("TRES3FNT");
		HudMessageBold(s:"Waiting for atleast 2 players"; HUDMSG_FADEINOUT, 100, CR_WHITE, 0.5, 0.7, 0.5, 0.5);
	}
		
	SetFont("TRES4FNT");

	SetPlayerProperty(1, false, PROP_TOTALLYFROZEN);
    
	rand = ZD_Rand(TID_PLAYERBASE, TID_PLAYERBASE + PlayerTopIndex());
	
	// Let's spawn a dummy
	while (!Thing_Spawn(rand, T_CHICKENSPAWNER, 0, TID_DUMMY)) 
	{
		rand = ZD_Rand(TID_PLAYERBASE, TID_PLAYERBASE + PlayerTopIndex());
		Delay(2);
	}
	
	Delay(3 * SEC);
	
	// Spawn the real chicken at the dummy
	while(!ThingCount(0, TID_CHICKEN))
	{
		Thing_Spawn(TID_DUMMY, T_CHICKENPICKUP, 0, TID_CHICKEN);
		delay(1);
	}
	
    Thing_Hate(TID_CHICKEN, TID_PLAYERBASE + ZD_Rand(0, PlayerTopIndex()));
    PrintBold(s:"A Chicken has appeared!");
	AmbientSound("ctcchicken/sight", 127);
	
	for (int i=0;i<MAX_PLAYERS;i++)
		Score[i] = 0;
		
	gamestarted = true;
	ACS_Execute(CTC_EMERGENCY, 0);

	// main loop
	while (true)
	{
		// check if score limit rechead
		for (int i = 0; i < MAX_PLAYERS; i++) 
		{
			if (PlayerInGame(i) && Score[i] >= WinningScore) 
			{
				ACS_Terminate(CTC_SCORING, 0);
				SetPlayerProperty(1, true, PROP_TOTALLYFROZEN);
				PrintBold(n:i+1, s:" has won!!");

				delay(5*35);

				PrintScore();
				delay(2);
				Exit_Normal(0);
			}
		}

		/* Time limit
		Todo: Custom timelimit system needed to start the count right as the first
		chicken spawns.. 
		*/
		if (GetCvar("timelimit") > 0 && (GetCvar("timelimit") * 60 )-1 == (Timer() / 35))
		{
			PrintScore();
			delay(2);
			Exit_Normal(0);
		}

		// LeaderBoard
		PrintScores();

		delay(10);
	}
}

// Assign TID to new players
Script CTC_ENTER Enter
{
	bool carry = false;
	int oldsnd, snd;

	// Assign TID to new players
	Thing_ChangeTID(0, TID_PLAYERBASE+PlayerNumber());
	NumPlayers = PlayerCount();

	// remove weapon if player has it
	if (CheckInventory("Mace"))
		TakeInventory("Mace", 1);

	SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);

	while (!gamestarted)
		delay(1);

    SetFont("TRES4FNT");
	
	while (GetActorProperty(0, APROP_Health) > 0)
	{
		// if player carry the chicken
		if (CheckInventory("Mace"))
		{
			// only once per catch
			if (!carry)
			{
				carry = true;
				Carrier = PlayerNumber();

				PrintBold(n:PlayerNumber() + 1, s:" Has picked up the Chicken!!");
				AmbientSound("ctcchicken/sight", 127);

				// reset sound
				oldsnd = 0;
				snd = Zd_rand (3, 7);

				// Scoring
				ACS_Execute(CTC_SCORING, 0, PlayerNumber());
			}

			// play the sound
			if (oldsnd == (snd * 35))
			{
				ThingSound(TID_PLAYERBASE + PlayerNumber(), "ctcchicken/active", 127);
				snd = Zd_rand (3, 7);
				oldsnd = 0;
			}

			// Drop a feather
			if (!(oldsnd % 8))
				DropItem (TID_PLAYERBASE + PlayerNumber(), "Feather");

			SetPlayerProperty (0, false, PROP_INVULNERABILITY);
			SetPlayerProperty (0, false, PROP_STRENGTH);
			SetPlayerProperty (0, false, PROP_INVISIBILITY);
		
			if (CheckInventory("Health") > 0)
				Setweapon("Mace");
		}
		else
			carry = false;

		delay(1);
		oldsnd++;
	}
}

// Release chicken when carrier dies
Script CTC_DEATH Death
{
    SetFont("TRES4FNT");

	if (Carrier == PlayerNumber()) 
	{
		ACS_Terminate(CTC_SCORING, 0);
		DropItem (TID_PLAYERBASE + PlayerNumber(), "Mace");
		Thing_ChangeTID(TID_PLAYERBASE + PlayerNumber(), 0);
		
		PrintBold(n:PlayerNumber() + 1, s:" has dropped the Chicken!!");
		AmbientSound("ctcchicken/sight", 127);

		Carrier = -1;
	}
}

// Reset TID
Script CTC_RESPAWN Respawn
{
	// Later
}

// Watch for leaving players
Script CTC_LEAVERS (int player) Disconnect
{
	SetFont("TRES4FNT");

	Score[player] = 0;

	NumPlayers = PlayerCount();

	// if the disconencted player had the chicken
	if (Carrier == player)
	{
		// everything explode
		// TODO
		// Spawn a chicken somewhere

		Carrier = -1;
	}
}

// Emergency Chicken Saver script.  Keeping your chickens in the game since 1902.
Script CTC_EMERGENCY (void)
{
	SetFont("TRES4FNT");
	if (Carrier == -1 && ThingCount(T_NONE, TID_CHICKEN) == 0) 
	{
		Delay(95);
		
		if (Carrier == -1 && ThingCount(T_NONE, TID_CHICKEN) == 0) 
		{
			PrintBold(s:"No Chicken Detected!");
			delay(35*2);
    
			rand = ZD_Rand(TID_PLAYERBASE,TID_PLAYERBASE+PlayerTopIndex());
			
			while(!Thing_Spawn(rand, 13, 0, TID_DUMMY)) //Let's spawn a dummy
			{
				rand = ZD_Rand(TID_PLAYERBASE,TID_PLAYERBASE+PlayerTopIndex());
				Delay(2);
			}
	
			delay(94);
			Thing_Spawn(TID_DUMMY, T_CHICKENPICKUP, 0, TID_CHICKEN); //spawns the actual chicken on the chickenspawner
			PrintBold(s:"ChickenSaver(TM) Activated!!");
			AmbientSound("ctcchicken/sight", 127);			
		}
	}
	delay(95);
	restart;
}	

// Scoring
Script CTC_SCORING (int player)
{
	while (true)
	{
		delay(35);
		Score[player]++;

		// adding a disconnect-fail proof concept thing
		if (!PlayerInGame(player))
			terminate;
	}
}